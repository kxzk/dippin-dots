#!/usr/bin/env bash

tdd() {
    # Generate simple technical design doc skeleton
    local date=$(date "+%Y-%m-%d")
    local file="technical-design-doc-$date.md"

    if [[ -e "$file" ]]; then
        echo "$file already exists" >&2
        return 1
    fi

    local template='
# **$TITLE**

| Status       | **Draft In Review Approved** **Rejected Backlogged** |
| ------------ | ---------------------------------------------------- |
| Authors      | $AUTHORS                                             |
| Last Updated | $DATE_UTC                                            |
| Approvers    | $APPROVERS                                           |

### **Document History**

| Date      | Author            | Description                                                           |
| --------- | ----------------- | --------------------------------------------------------------------- |
| $DATE_UTC | $PRIMARY_AUTHOR   | Initial version shared to #eng-all; feedback requested; reviewers TBA |

# **Objective**

$OBJECTIVE_1_2_SENTENCES

# **Background**

Briefly describe the status quo and why it’s insufficient **without** prescribing solutions.

- Current state: $BACKGROUND_POINT_1
- What works well: $BACKGROUND_POINT_2
- Pain points / gaps: $BACKGROUND_POINT_3

Motivations for change:

- $MOTIVATION_1
- $MOTIVATION_2
- $MOTIVATION_3

Other context and constraints to keep in mind:

- $CONTEXT_1
- $CONTEXT_2

# **Goals**

Short, testable statements:

1. $GOAL_1
   1. $GOAL_1_DETAIL_A
   2. $GOAL_1_DETAIL_B
2. $GOAL_2
3. $GOAL_3

# **Non-Goals**

1. $NON_GOAL_1
2. $NON_GOAL_2
3. $NON_GOAL_3

# **Overview**

High‑level summary of the design (≤5 short paragraphs). Avoid low‑level details here.

- Introduce the new model/workflow/component and where it lives.
- Describe what changes for upstream/downstream systems.
- Note any data not migrated or intentionally left as‑is.
- Summarize rollout and compatibility posture.

# **Detailed Design**

> Delete sections that don’t apply. Add more as needed. Keep explanations crisp; prefer diagrams and tables where useful.

### **Schema**
- Entities, fields, invariants, ownership.

### **Migrating/Handling Older Records**
- Backfill strategy, immutable vs mutable fields, idempotency.

### **Constraints Enforced**
- Validation rules, referential integrity, invariants, quotas.

### **Testing plan / approaches**
- Unit/service/integration strategy; edge cases; failure injection.

### **Interfaces & Integration**
- Service boundaries, APIs, events, contracts, compatibility plan.

### **UI / Consumer Impact**
- User‑visible changes, migration aids, docs.

### **Internal Tools / Ops Updates**
- Runbooks, dashboards, alerts, oncall playbooks.

### **Security, Compliance & Privacy**
- Trust boundaries, authz/authn, PII handling, logging hygiene.

### **Metrics & Dashboards**
- Leading/lagging indicators, SLOs, error budgets.

### **Corner Case Handling**
- Enumerate tricky cases and expected behavior.
- Examples: $CORNER_CASE_1, $CORNER_CASE_2

### **Mutability: Permitted or Prohibited**
- Which fields/processes are immutable; exception process if any.

# **Caveats**

What may be suboptimal after this change? Surprising behaviors? Residual risks?
- $CAVEAT_1
- $CAVEAT_2

# **Alternatives considered**

Summarize candidate approaches and why they were rejected.

- **Alt A — $ALT_A_NAME**: Pros; Cons; Why not chosen.
- **Alt B — $ALT_B_NAME**: Pros; Cons; Why not chosen.
- **Decision record**: Link to ADR if created.

---

## Appendices (auto-filled suggestions; keep only if helpful)

### Risk & Rollout
- **Blast radius**: $BLAST_RADIUS
- **Rollout plan**: flags, gradual exposure, rollback strategy
- **Monitoring**: key metrics and alerts to watch during rollout

### Open Questions
- $QUESTION_1
- $QUESTION_2
'

    printf "%s\n" "$template" >"$file"
    echo "[created] $file"
}

tdd
